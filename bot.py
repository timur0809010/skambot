import json
import os
from datetime import datetime, timezone
from typing import Dict, List, Optional
import random   
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup

BOT_TOKEN = "8141929022:AAGxzxJWnGQZQeshJEWoHd7WjSPAPRM3Tdg"
JSON_DB = "database.json"

#–°–ø–æ–Ω—Å–æ—Ä—ã –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ["@stargiverfree", "https://t.me/+sFYzeMzMVYs3Y2Uy @daillystar"]
Sponsor = ["@wowstarschannel", "@zalivchik01", "@zalivchik02", "@wowstarsviplaty" ]
#—Å–ø–æ–Ω—Å–æ—Ä—ã —Å –∑–∞—è–≤–∫–∞–º
Sponsorv2 = ["+YaM7XHKawJc3OGE6", "+Hoy2yDoQShM5YmQy", "+yVyBCnAJnUU1ZjIy", "+59YzQfSNVDAxNTVi", "+57DsOtzKo05hMGIy", "+57DsOtzKo05hMGIy", "+NcMqw3mSyuMwYTUy", "+KasEJbanfFRiOGFi", "giftsbattle_bot?startapp=ref_Zi5LuyDZ6"]
#–ö–∞–Ω–∞–ª —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏
Withdraw_channel = ["@wowstarsviplaty"]
#–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 
Referral_reward = 15
#ID –ê–¥–º–∏–Ω–∞ 
Admin = 8059249045
#ID –°–æ–∑–¥–∞—Ç–µ–ª—è
Developer = 8059249045
#–°—É–º–∞ –≤—ã–≤–æ–¥–∞
Withdraw_min = 15

bot = telebot.TeleBot(BOT_TOKEN)

def load_promo() -> List:
    if not os.path.exists("promo.json"):
        return []
    with open("promo.json", "r", encoding="utf-8") as f:
        return json.load(f)

def save_promo(data: List) -> None:
    with open("promo.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

def load_task():
    try:
        with open("task.json", "r", encoding="utf-8") as f:
            tasks = json.load(f)
        
        current_time = datetime.now(timezone.utc)
        updated_tasks = []
        
        for task in tasks:
            try:
                task_time = datetime.strptime(task["time"], "%d-%m-%Y %H:%M").replace(tzinfo=timezone.utc)
                if task_time > current_time:
                    updated_tasks.append(task)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        
        if len(updated_tasks) < len(tasks):
            save_task(updated_tasks)
        
        return updated_tasks
    except FileNotFoundError:
        return []

def save_task(data: List) -> None:
    with open("task.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

def load_db() -> Dict:
    if not os.path.exists(JSON_DB):
        return {}
    with open(JSON_DB, "r", encoding="utf-8") as f:
        return json.load(f)

def save_db(data: Dict) -> None:
    with open(JSON_DB, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

def check_subscription(user_id: int) -> bool:
    try:
        for sponsor in Sponsor:
            if "https://t.me/" in sponsor:
                parts = sponsor.split()
                if len(parts) > 1 and parts[1].startswith("@"):
                    channel = parts[1].replace("@", "")
                    status = bot.get_chat_member(f"@{channel}", user_id).status
                    if status not in ["member", "administrator", "creator"]:
                        return False
            elif "@" in sponsor:
                channel = sponsor.replace("@", "")
                status = bot.get_chat_member(f"@{channel}", user_id).status
                if status not in ["member", "administrator", "creator"]:
                    return False

        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def main_menu(user_id: int) -> None:
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üîó –†–µ—Ñ–µ—Ä–∞–ª—ã")
    markup.row("üìå –ó–∞–¥–∞–Ω–∏—è", "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    bot.send_message(user_id, "üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîπ", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    db = load_db()

    if str(user_id) not in db:
        db[str(user_id)] = {
            "balance": 0,
            "referrals": [],
        }
        save_db(db)

    if len(message.text.split()) > 1:
        referrer_id = message.text.split()[1]
        if referrer_id != str(user_id) and referrer_id in db:
            if 'pending_referral' not in db[str(user_id)]:
                db[str(user_id)]['pending_referral'] = referrer_id
                save_db(db)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—ã
    all_sponsors = [{"src": s, "required": True} for s in Sponsor] + [{"src": s, "required": False} for s in Sponsorv2]
    random.shuffle(all_sponsors)

    markup = InlineKeyboardMarkup()

    for sponsor in all_sponsors:
        s = sponsor["src"]
        required = sponsor["required"]

        if s.startswith("http") and " " in s:
            url, username = s.split()
        else:
            username = s
            url = f"https://t.me/{username.replace('@', '')}"

        markup.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=url))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
    if not check_subscription(user_id):
        markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
        bot.send_message(user_id, "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=markup)
    else:
        process_referral(user_id, db)
        main_menu(user_id)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    user_id = call.from_user.id
    db = load_db()
    
    if check_subscription(user_id):
        process_referral(user_id, db)
        main_menu(user_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!")
        
def process_referral(user_id, db):
    if 'pending_referral' in db.get(str(user_id), {}):
        referrer_id = db[str(user_id)]['pending_referral']
        if referrer_id in db and str(user_id) not in db[referrer_id]["referrals"]:
            db[referrer_id]["referrals"].append(str(user_id))
            db[referrer_id]["balance"] += Referral_reward
            del db[str(user_id)]['pending_referral']
            save_db(db)
            try:
                username = bot.get_chat(user_id).username
                bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! @{username} (ID: {user_id})")
            except:
                pass

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    user_id = call.from_user.id
    db = load_db()
    
    if check_subscription(user_id):
        process_referral(user_id, db)
        main_menu(user_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!")

def process_referral(user_id, db):
    if 'pending_referral' in db.get(str(user_id), {}):
        referrer_id = db[str(user_id)]['pending_referral']
        if referrer_id in db and str(user_id) not in db[referrer_id]["referrals"]:
            db[referrer_id]["referrals"].append(str(user_id))
            db[referrer_id]["balance"] += Referral_reward
            del db[str(user_id)]['pending_referral']
            save_db(db)
            try:
                username = bot.get_chat(user_id).username
                bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! @{username} (ID: {user_id})")
            except:
                pass

@bot.message_handler(func=lambda msg: msg.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = message.from_user.id
    db = load_db()
    user_data = db.get(str(user_id), {"balance": 0, "task": [], "referrals": []})

    text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n"
        f"üßë‚Äçüíª *ID*: {user_id}\n"
        f"üí∏ *–Æ–∑–µ—Ä–Ω–µ–π–º*: @{message.from_user.username}\n"
        f"‚≠ê *–ë–∞–ª–∞–Ω—Å*: {user_data['balance']:.2f} stars\n"
        f"üîó *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤*: {len(user_data['referrals'])}"
    )
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo"))
    markup.add(InlineKeyboardButton("üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"))



    process_referral(user_id, db)
    bot.send_message(user_id, text, reply_markup=markup, parse_mode="Markdown")


@bot.message_handler(commands=['addpromo'])
def add_promo(message):
    user_id = message.from_user.id
    if user_id != Admin:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    bot.register_next_step_handler(msg, process_add_promo_step1)

def process_add_promo_step1(message):
    promo_name = message.text.strip()
    msg = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    bot.register_next_step_handler(msg, lambda m: process_add_promo_step2(m, promo_name))

def process_add_promo_step2(message, promo_name):
    try:
        activations = int(message.text)
        msg = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ stars):")
        bot.register_next_step_handler(msg, lambda m: process_add_promo_step3(m, promo_name, activations))
    except ValueError:
        bot.send_message(message.from_user.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

def process_add_promo_step3(message, promo_name, activations):
    try:
        reward = float(message.text)
        promos = load_promo()
        
        if any(p.get("name") == promo_name for p in promos):
            bot.send_message(message.from_user.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        promos.append({
            "name": promo_name,
            "promo": promo_name.lower().replace(" ", "_"),
            "Active": activations,
            "Reward": reward,
            "Users": []
        })
        
        save_promo(promos)
        bot.send_message(message.from_user.id,
                       f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                       f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {promo_name}\n"
                       f"üî¢ –ö–æ–¥: {promo_name.lower().replace(' ', '_')}\n"
                       f"üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n"
                       f"‚≠ê –ù–∞–≥—Ä–∞–¥–∞: {reward} stars")
    except ValueError:
        bot.send_message(message.from_user.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.callback_query_handler(func=lambda call: call.data == "promo")
def promo_handler(call):
    user_id = call.from_user.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(msg, process_promo)

def process_promo(message):
    user_id = message.from_user.id
    promo_code = message.text.strip().lower().replace(" ", "_")
    promos = load_promo()
    db = load_db()
    
    found = False
    for promo in promos:
        if promo["promo"] == promo_code:
            found = True
            if str(user_id) in promo["Users"]:
                bot.send_message(user_id, "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
                return
            
            if len(promo["Users"]) >= promo["Active"]:
                promos.remove(promo)
                save_promo(promos)
                bot.send_message(user_id, "‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω!")
                return
            
            promo["Users"].append(str(user_id))
            reward = promo["Reward"]
            
            if str(user_id) not in db:
                db[str(user_id)] = {"balance": 0, "referrals": []}
            db[str(user_id)]["balance"] += reward
            
            save_db(db)
            save_promo(promos)
            
            remaining = promo["Active"] - len(promo["Users"])
            bot.send_message(user_id, 
                           f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                           f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {reward} stars\n"
                           f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {remaining}")
            
            if remaining <= 0:
                promos.remove(promo)
                save_promo(promos)
            return
    
    if not found:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        
@bot.message_handler(commands=['addtask'])
def add_task(message):
    user_id = message.from_user.id
    if user_id != Admin:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    msg = bot.send_message(user_id, "üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (–∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞):")
    bot.register_next_step_handler(msg, process_add_task_step1)

def process_add_task_step1(message):
    try:
        task_link = message.text.strip()
        msg = bot.send_message(message.from_user.id, 
                             "üîπ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                             "(–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç ID –∫–∞–Ω–∞–ª–∞):")
        bot.register_next_step_handler(msg, lambda m: process_add_task_step2(m, task_link))
    except Exception as e:
        bot.send_message(message.from_user.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_add_task_step2(message, task_link):
    try:
        if message.forward_from_chat:
            if message.forward_from_chat.type == 'channel':
                channel_id = message.forward_from_chat.id
                channel_username = message.forward_from_chat.username
                channel_title = message.forward_from_chat.title
                
                channel_info = f"id:{channel_id}"
                bot.send_message(message.from_user.id, 
                               f"‚úÖ –ö–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω: {channel_title}\n"
                               f"ID: {channel_id}\n"
                               f"Username: @{channel_username if channel_username else '–Ω–µ—Ç'}")
                
                msg = bot.send_message(message.from_user.id, 
                                    "‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú UTC):")
                bot.register_next_step_handler(msg, lambda m: process_add_task_step3(m, task_link, channel_info))
            else:
                bot.send_message(message.from_user.id, "‚ùå –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞!")
        else:
            bot.send_message(message.from_user.id, "‚ùå –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!")
    except Exception as e:
        bot.send_message(message.from_user.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_add_task_step3(message, task_link, channel_info):
    try:
        time_str = message.text.strip()
        datetime.strptime(time_str, "%d-%m-%Y %H:%M")
        
        msg = bot.send_message(message.from_user.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ stars):")
        bot.register_next_step_handler(msg, lambda m: process_add_task_step4(m, task_link, channel_info, time_str))
    except ValueError:
        bot.send_message(message.from_user.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        bot.send_message(message.from_user.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_add_task_step4(message, task_link, channel_info, time_str):
    try:
        reward = float(message.text)
        tasks = load_task()
        
        if any(t["task"] == task_link for t in tasks):
            bot.send_message(message.from_user.id, "‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        tasks.append({
            "task": task_link,
            "Examination": channel_info,
            "time": time_str,
            "Reward": reward,
            "Users": []
        })
        
        save_task(tasks)
        bot.send_message(message.from_user.id, 
                       f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                       f"üîó –°—Å—ã–ª–∫–∞: {task_link}\n"
                       f"üì¢ –ö–∞–Ω–∞–ª: {channel_info}\n"
                       f"‚è≥ –î–æ: {time_str}\n"
                       f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} stars")
    except ValueError:
        bot.send_message(message.from_user.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –Ω–∞–≥—Ä–∞–¥—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        bot.send_message(message.from_user.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")

@bot.message_handler(func=lambda msg: msg.text == "üìå –ó–∞–¥–∞–Ω–∏—è")
def tasks_handler(message):
    user_id = message.from_user.id
    tasks = load_task()
    user_tasks = [t for t in tasks if str(user_id) not in t["Users"]]
    
    if not user_tasks:
        bot.send_message(user_id, "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!")
        return
    
    show_task(user_id, user_tasks, 0)

def show_task(user_id, tasks, index):
    task = tasks[index]
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîó –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", url=task["task"]))
    markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_task_{index}"))
    
    if len(tasks) > 1:
        if index < len(tasks) - 1:
            markup.add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_task_{index + 1}"))
        else:
            markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_task_{index - 1}"))
    
    bot.send_message(user_id, f"üìå –ó–∞–¥–∞–Ω–∏–µ {index + 1}/{len(tasks)}\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith(("check_task_", "next_task_", "prev_task_")))
def task_actions(call):
    user_id = call.from_user.id
    action, index = call.data.split("_")[0], int(call.data.split("_")[-1])
    tasks = load_task()
    user_tasks = [t for t in tasks if str(user_id) not in t["Users"]]
    
    if action == "check":
        task = user_tasks[index]
        if check_subscription(user_id, task["Examination"]):
            tasks = load_task()
            for t in tasks:
                if t["task"] == task["task"]:
                    t["Users"].append(str(user_id))
                    save_task(tasks)
                    db = load_db()
                    db[str(user_id)]["balance"] += task["Reward"]
                    save_db(db)
                    bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {task['Reward']} stars")
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    break
        else:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
    elif action in ["next", "prev"]:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_task(user_id, user_tasks, index)

def check_task(user_id: int, channel_info: str) -> bool:
    try:
        if channel_info.startswith("id:"):
            chat_id = int(channel_info[3:])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª—Å—è —Ñ–æ—Ä–º–∞—Ç id:123456, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {channel_info}")
            return False

        try:
            status = bot.get_chat_member(chat_id, user_id).status
            return status in ["member", "administrator", "creator"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ ({chat_id}): {e}")
            return False
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_task: {e}")
        return False

@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def withdraw(call):
    user_id = str(call.from_user.id)
    db = load_db()
    balance = db.get(user_id, {}).get("balance", 0)
    referrals = db.get(user_id, {}).get("referrals", [])

    if len(referrals) < 10:
        bot.answer_callback_query(call.id, "‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!")
        return

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("15 stars üß∏üíù", callback_data="withdraw_15"),
        InlineKeyboardButton("25 stars üåπüéÅ", callback_data="withdraw_25"),
        InlineKeyboardButton("50 stars üíêüéÇüöÄüçæ", callback_data="withdraw_50"),
        InlineKeyboardButton("100 stars üíéüíçüèÜ", callback_data="withdraw_100")
    )
    
    bot.send_message(
        chat_id=call.message.chat.id,
        text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} stars\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("withdraw_"))
def process_withdraw(call):
    user_id = str(call.from_user.id)
    db = load_db()
    user_data = db.get(user_id, {})
    balance = user_data.get("balance", 0)
    referrals = user_data.get("referrals", [])

    if len(referrals) < 10:
        bot.answer_callback_query(call.id, "‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!")
        return

    amount = int(call.data.split("_")[1])

    if balance < amount:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} stars")
        return

    db[user_id]["balance"] -= amount
    save_db(db)

    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}_{amount}"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={user_id}")
    )
    markup.row(InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{amount}"))

    admin_text = (
        "üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥*\n"
        f"‚ñ´Ô∏è *ID*: `{user_id}`\n"
        f"‚ñ´Ô∏è *–Æ–∑–µ—Ä–Ω–µ–π–º*: @{call.from_user.username}\n"
        f"‚ñ´Ô∏è *–ë–∞–ª–∞–Ω—Å*: `{balance:.2f} stars`\n"
        f"‚ñ´Ô∏è *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤*: `{len(referrals)}`\n"
        f"‚ñ´Ô∏è *–°—É–º–º–∞*: `{amount:.2f} stars`"
    )
    user_text = (
        f"üìå *–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} stars, —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {amount:.2f} –∑–≤—ë–∑–¥. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–≤–æ–¥–∞.*"
    )
    bot.send_message(Admin, admin_text, reply_markup=markup, parse_mode="Markdown")
    bot.send_message(call.from_user.id, user_text, parse_mode="Markdown")
    bot.answer_callback_query(call.id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


@bot.callback_query_handler(func=lambda call: call.data.startswith(("approve_", "reject_")))
def admin_actions(call):
    parts = call.data.split("_")
    action = parts[0]
    user_id = parts[1]
    amount = float(parts[2])

    db = load_db()

    if action == "approve":
        bot.send_message(int(user_id), f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} stars –æ–¥–æ–±—Ä–µ–Ω–∞!")
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
    elif action == "reject":
        db[user_id]["balance"] += amount
        save_db(db)
        bot.send_message(int(user_id), f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} stars –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")


@bot.message_handler(func=lambda msg: msg.text == "üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
def bot_info(message):
    user_id = message.from_user.id
    db = load_db()
    
    total_users = len([uid for uid in db if uid.isdigit()])
    total_balance = sum(user_data.get("balance", 0) for uid, user_data in db.items() if uid.isdigit())


    
    text = (
        "üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: `{total_balance:.2f} stars`\n\n"
        "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n \n"
        "‚ù§Ô∏è‚Äçüî• –ù–µ –ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ –ø–æ–≤–æ–¥—É –≤—ã–ø–ª–∞—Ç, –ø–∏—à–∏—Ç–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞."
    )

    
    if not check_subscription(user_id):
        markup = InlineKeyboardMarkup()
        for sponsor in Sponsor:
            if "https://t.me/" in sponsor:
                parts = sponsor.split()
                if len(parts) > 1 and parts[1].startswith("@"):
                    url = parts[0]
                    btn_text = f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {parts[1]}"
                    markup.add(InlineKeyboardButton(btn_text, url=url))
            else:
                markup.add(InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è {sponsor}", url=f"https://t.me/{sponsor.replace('@', '')}"))
        markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
        bot.send_message(user_id, "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=markup)
    else:
        process_referral(user_id, db)
        
        markup = InlineKeyboardMarkup()
        main_menu(user_id)
        buttons_row = []
        if Developer:
            buttons_row.append(InlineKeyboardButton("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url=f"tg://user?id={Developer}"))
        if Admin:
            buttons_row.append(InlineKeyboardButton("üë®‚Äç‚öñÔ∏è –ê–¥–º–∏–Ω", url=f"tg://user?id={Admin}"))
        
        if buttons_row:
            markup.row(*buttons_row)
        buttons_row = []

        if Withdraw_channel and Withdraw_channel[0]:
            buttons_row.append(InlineKeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç—ã", url=f"https://t.me/{Withdraw_channel[0].replace('@', '')}"))

        buttons_row.append(InlineKeyboardButton("üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="top_referrals"))
        
        markup.row(*buttons_row)
        bot.send_message(user_id, text, reply_markup=markup, parse_mode="Markdown")
        
        
        

@bot.callback_query_handler(func=lambda call: call.data == "top_referrals")
def show_top_referrals(call):
    user_id = call.from_user.id
    db = load_db()
    
    referrals_list = []
    for user_id_str, user_data in db.items():
        if "referrals" in user_data and user_data["referrals"]:
            try:
                user = bot.get_chat(int(user_id_str))
                username = f"@{user.username}" if user.username else f"{user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
            except:
                username = f"ID: {user_id_str}"
            referrals_list.append((username, len(user_data["referrals"])))
    
    referrals_list.sort(key=lambda x: x[1], reverse=True)
    
    top_referrals = referrals_list[:5]
    
    if top_referrals:
        text = "üèÜ *–¢–æ–ø 5 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º*\n\n"
        for i, (username, count) in enumerate(top_referrals, 1):
            text += f"{i}. {username} - {count} —Ä–µ—Ñ.\n"
    else:
        text = "üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö"
    
    bot.send_message(
        chat_id=call.message.chat.id,
        text=text,
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda msg: msg.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—ã")
def partners(message):
    user_id = message.from_user.id
    db = load_db()
    ref_count = len(db.get(str(user_id), {}).get("referrals", []))

    text = (
        "ü§ù *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ü—Ä–æ–≥—Ä–∞–º–∞*\n"
        f"üí∏ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\n"
        f"‚≠ê –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {Referral_reward:.2f} stars\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n`https://t.me/{bot.get_me().username}?start={user_id}`"
    )
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—ã
    all_sponsors = [{"src": s, "required": True} for s in Sponsor] + [{"src": s, "required": False} for s in Sponsorv2]
    random.shuffle(all_sponsors)

    markup = InlineKeyboardMarkup()

    for sponsor in all_sponsors:
        s = sponsor["src"]
        required = sponsor["required"]

        if s.startswith("http") and " " in s:
            url, username = s.split()
        else:
            username = s
            url = f"https://t.me/{username.replace('@', '')}"

        markup.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=url))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
    if not check_subscription(user_id):
        markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
        bot.send_message(user_id, "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=markup)
    else:
        process_referral(user_id, db)
        main_menu(user_id)
        bot.send_message(user_id, text, parse_mode="Markdown")

pending_post = {}

@bot.message_handler(commands=['post'])
def handle_post_command(message):
    user_id = message.from_user.id
    if user_id != Admin:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    msg = bot.reply_to(message, "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º):")
    bot.register_next_step_handler(msg, process_post_content)

def process_post_content(message):
    user_id = message.from_user.id
    if user_id != Admin:
        return
    
    pending_post['content'] = message
    
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_post"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")
    )
    
    if message.content_type == 'text':
        bot.send_message(user_id, f"üìù –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{message.text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=markup)
    elif message.content_type == 'photo':
        bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption or "", 
                      reply_markup=markup)
    elif message.content_type == 'document':
        bot.send_document(user_id, message.document.file_id, caption=message.caption or "", 
                         reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['send_post', 'cancel_post'])
def handle_post_confirmation(call):
    if call.from_user.id != Admin:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É!")
        return
    
    if call.data == 'cancel_post':
        bot.edit_message_text(chat_id=call.message.chat.id, 
                            message_id=call.message.message_id, 
                            text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        pending_post.clear()
        return
    
    db = load_db()
    total_users = len(db)
    sent_count = 0
    
    bot.edit_message_text(chat_id=call.message.chat.id, 
                         message_id=call.message.message_id, 
                         text="‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    message = pending_post['content']
    
    for user_id_str in db.keys():
        try:
            if message.content_type == 'text':
                bot.send_message(user_id_str, message.text)
            elif message.content_type == 'photo':
                bot.send_photo(user_id_str, message.photo[-1].file_id, caption=message.caption or "")
            elif message.content_type == 'document':
                bot.send_document(user_id_str, message.document.file_id, caption=message.caption or "")
            sent_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
    
    bot.send_message(Admin, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    pending_post.clear()


@bot.message_handler(commands=["set_balance"])
def set_balance(message):
    if message.from_user.id != Admin:
        return

    parts = message.text.split()
    if len(parts) != 3:
        bot.reply_to(message, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/set_balance <user_id> <—Å—É–º–º–∞>`", parse_mode="Markdown")
        return

    user_id, new_balance = parts[1], parts[2]
    try:
        new_balance = float(new_balance)
    except ValueError:
        bot.reply_to(message, "‚ùó –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="Markdown")
        return

    db = load_db()

    if user_id in db:
        db[user_id]["balance"] = new_balance
        save_db(db)
        bot.reply_to(message, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}` –æ–±–Ω–æ–≤–ª—ë–Ω: {new_balance}‚≠ê", parse_mode="Markdown")
    else:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", parse_mode="Markdown")


@bot.message_handler(commands=['dump'])
def dump_db(message):
    if message.from_user.id != Admin: return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    db = load_db()
    bot.send_document(message.chat.id, open(JSON_DB, 'rb'))


@bot.message_handler(commands=['reward'])
def set_reward(message):
    global Referral_reward
    if message.from_user.id != Admin:
        return bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            return bot.reply_to(message, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reward 1.5")

        new_reward = float(parts[1])
        Referral_reward = new_reward
        bot.reply_to(message, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {Referral_reward} ‚≠ê")
    except ValueError:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: `/reward 1.5`", parse_mode="Markdown")



if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()
